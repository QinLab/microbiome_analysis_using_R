[
["index.html", "Microbiome Analysis Using R Preface", " Microbiome Analysis Using R Scott A. Handley 2017-04-13 Preface This book was designed to provide instruction and examples on how to process 16S amplicon data in R for microbial community ecology studies. The material was developed during over a period from Fall 2016 through Summer 2017 and represents a sythesis of material obtained during training at the 2017 Workshop on Genomics and through forum posts across the internet. In particular, the PhyloSeq and dada2 GitHub issues page. "],
["introduction.html", "Chapter 1 Introduction 1.1 Motivation 1.2 What this book is 1.3 What this book isn’t", " Chapter 1 Introduction 16S amplicon surveys have become a common technique for assessing bacterial community composition. The technique has been applied with great success towards understanding how bacterial communities and their individual members are associated various environments. While metagenomic approaches (shotgun sequencing of total nucleic acid extracts) has some major advantages over targeted amplicon sequencing, amplicon sequencing still offers a wealth of knowledge about how bacterial communities are structured at a fraction of the cost, and thus, amplicon based studies remain a practical option for researchers. Analysis 16S amplicon survey data has been a standard analysis for over a decade. Surveys can be completed on sparse (acid mine runoff) or dense (soil, human stool) communities. Regardless, the results of such experiments generate complex data sets composed of the information about the presence, relative abundances of and relationships of all detectable bacterial taxa within a community. These data are then associated with environmental factors (e.g. pH, soil depth, patient disease status) and a combination of both exploratory and statistical techniques are applied to determine if community structure or if a specific bacterial taxa is preferentially associated with an environment or state. This end-to-end workflow, beginning with sample collection and study design, proceeding through nucleic acid extraction, library preparation and sequencing requires a large number of decisions and planning by the researcher which ultimately results in a data file on their computer ready for analysis. There are a number of well-developed software packages which enable researchers to analyze these frequently complex data sets. In particular, both QIIME MOTHUR stand out as applications that have enabled a tremendous amount of research into the investigation of 16S amplicon survey data. At the writing of this introduction, the original QIIME publication had been cited 7,154 times and the original MOTHUR publication 6,551 times, quantifying the influence these software packages have had on the research community. While both of these software packages are “one-stop-shops” for 16S amplicon survey analysis, they do have some limitations. For example, many of the base graphics resulting from QIIME require post-processing steps in a graphic design program such as Adobe Illustrator or re-processing the data through R and plotting with ggplot2. Or if an analysis has not been developed by the QIIME or MOTHUR development teams then the researcher has to either wait for the analysis to be built into these packages, develop their own software, or find another resource. This later challenge is being addressed by the plug-in capabilities of QIIME 2, but there still remains a need for an integrated environment for managing 16S amplicon data, providing both exploratory and statistical analysis all while generating rich reports and plots to aid in the interpretation of results. The R programming language provides a set of tools to, at least in part, complement analysis generated by these larger software packages. It is indeed possible to complete a study without any knowledge of R, but R does have an extensive history of development of algorithms for assessing community ecology (i.e. the Vegan software package original published in 2003) and testing for the differential abundance of taxa between states (i.e. DeSeq2 and metagenomeSeq) that are native to R and may be of use to researchers in investigating their 16S amplicon data. In addition, R has extensive support for documenting workflows through the use of R Markdown documents, an integrating native plotting environment and access to an advanced plotting paradigm through ggplot2, and perhaps most importantly, is useful for the analysis of other data types frequently created in research laboratories (RNAseq data, DNAmethylation, and basic statistical analysis). So not only does R provide some useful tools for the analysis of 16S amplicon data, the skills developed in using R for analysis of microbial communities could be applied to analysis of data from other types of studies. For these reasons, R should be considered a valuable tool for researchers investigating bacterial communities. 1.1 Motivation This book was written as a result of approximately 1 year of experience using a combination of QIIME and R to analyze 16S amplicon survey data generated to ask questions about what bacterial communities look like on mucosal surfaces of HIV infected patients. In addition, material had been produced for training Workshops over the past several years which made it apparent that a single software solution was not always sufficient for completion of a robust analysis. In the process of researching and training, it became apparent that there were a variety of resources (e.g. vignettes, forum posts). available to assist researchers in pursuing the daunting task of integrating software and algorithmic solutions to their analysis, but these were disparate and frequently challenging to find. Thus, this book represents an effort to synthesize information from these experiences and resources into a cohesive unit with the hopes that others may benefit from this synthesis. 1.2 What this book is The material in the book is focused heavily on the use of PhyloSeq objects. PhyloSeq objects are a useful way to represent and integrate various types of data (e.g. operational taxonomic units or resolved sequence variant counts, taxonomy at various ranks, study variables and data, phylogenetic trees) into a single resource which can be accessed using functions in PhyloSeq, or extracted from to be used with other R packages (e.g. ggplot2, vegan). The content is focused on data curation and manipulation, workflow design, analysis tools and plotting not only using the built-in functions within PhyloSeq, but also on pulling data from PhyloSeq objects for use in other packages. 1.3 What this book isn’t This book is not meant to explain why you should use R over QIIME or MOTHUR or a variety of other options that are available for 16S amplicon survey analysis. Quite contrary to this, it is focused on how R can be used to integrate analysis from a variety of sources and output them to an even wider variety of resources. So the content is meant to be complementary to what is offered in these well-developed software packages. This book is also not designed to replace the well-developed PhyloSeq vignettes or other tutorials found around the web. In fact, much of this material was synthesized after going through these same vignettes and tutorials for various research projects and will pull directly from parts of them. Similarly, while it provides some basic material on how to work within R in the chapter on General Skills, it will not be enough material to make you an “R Wizard”. There is vast amounts of material on the web or through University courses that will assist in advanced training in R if you so desire. Finally, this book is not designed to provide in-depth explanations of concepts in microbial ecology. That topic requires several books on its own. However, basic introductions to some core concepts are provided for explanatory purposes. While this book does not formally cover these concepts, there is an appendix which provides links to various resources used in the creation of the content of this book, or which one may find useful for expanding their own knowledge base. "],
["general-skills.html", "Chapter 2 General Skills 2.1 Integrated Development Environment (IDE) 2.2 List of popular R IDEs 2.3 Packages 2.4 R Markdown", " Chapter 2 General Skills The completion of any project in R, microbiome focused or not, will benefit from some basic knowledge of a few tools developed by the R community to help document and expedite your work. This book is not meant to be a replacement for the tremendous number of R tutorials and Workshops currently available (see references for a few recommendations). The reality is that to become proficient at using R will likely take you much longer than you expect. R is a fully developed software language, and like human language, takes many years of immersion to fully develop proficiency. That being said, with some limited focus on learning, and with the aid of useful tools and an active support community, even a novice can complete a large number of basic analysis and should not shy away from working with R if their project would benefit from the packages, statistics or plotting made available through R. Below are several brief introductions to working efficiently and effectively with R. The topics have been selected to target the microbiome specific topics throughout this book, but are limited in scope. Links are provided for each topic if you wish to expand your knowledge further. 2.1 Integrated Development Environment (IDE) An Integrated Development Environment (IDE) is a term used by software developers to describe a comprehensive software toolbox for completing projects. An IDE it is single software package which pulls together all of the resources one needs to take a project from beginning to end. So imagine if Microsoft Office had a single software called the Microsoft IDE which combined Word, Excel and PowerPoint into a single software package. This would enable you to document, calculate and present your work all from one piece of software instead of working with them independently. R has several IDE options. The material in this book will focus on one, RStudio which is continually supported, updated and tightly integrated with a number of useful R tools. However, there are other several other options listed below. Of note, you do not need an IDE to work with R. In fact, R can be run entirely from the command line which is useful for scripting workflows. 2.2 List of popular R IDEs RStudio Microsoft Visual Studio IntelliJ Plug In Rattle StatET Plug In for Eclipse The value of using an IDE for R can not be overstated. A well-developed IDE, such as RStudio will enable you to work seamlessly with your data, manage your packages and document and publish your work either as a static document or to a web-site. knitr::include_graphics(&quot;./figures/ch02_rstudio_example.jpg&quot;) RStudio is a popular IDE for several reasons. First, it can be run as a server from a cloud based or local server (RStudio Server). This is useful if you want to have a number of people in a group work with a single installation or if you need the computing resources available in server/cloud hardware. Second, it provides a friendly front-end to access the R language. Being able to visualize code, files and plots in a single window is incredibly useful for exploring data. Third, it is tightly integrated with a number of useful tools such as RMarkdown for documenting your work or Shiny for making interactive analysis documents and many more useful tools. This book was written in RStudio using Bookdown. All of the analysis and figures were completed within RStudio as well. You can reproduce all of the analysis using RMarkdown documents. All of this was made much simpler due to the tight integration of these packages within RStudio. 2.3 Packages The concept of packages has been brought up throughout this book already. Put simply, a package can be thought of as an app for analysis. Packages are developed by people from various research communities and deposited either into the official R package repository CRAN or in curated, discipline specific repositories such as Bioconductor. More recently a large number of packages are being hosted on Github. Between CRAN, Bioconductor and Github you should be pretty well-covered in package discovery and installation. There are slightly different ways to install packages from each resource: CRAN: There are two ways to install packages from CRAN in RStudio. The first way is from the Packages tab which you will see at the top of one of the panes in RStudio: knitr::include_graphics(&quot;./figures/ch02_rstudio_install_packages.png&quot;) The other way is to use the install.packages command from the console. For example, the following code will install the ade4 package. install.packages(&quot;ade4&quot;) Bioconductor: Installing packages from Bioconductor requires you to first install Bioconductor using the following commands: ## try http:// if https:// URLs are not supported source(&quot;https://bioconductor.org/biocLite.R&quot;) biocLite() Once bioconductor installs you can install specific libraries. The following command will install the PhyloSeq package which is used extensively in this book. ## try http:// if https:// URLs are not supported source(&quot;https://bioconductor.org/biocLite.R&quot;) biocLite(&quot;phyloseq&quot;) Github: To install packages from Github you first have to install Developer Tools. The following series of commands would install Developer Tools and then install ggplot2 from it’s Github repository: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tidyverse/ggplot2&quot;) If everything goes smoothly the package will be installed and is ready to use. There can be some package specific issues such as the requirement for a dependency which you may need to read further documentation on at the package web site or by contacting the package author. Once you have a package installed you need to load it using the library function in R. Again, this can be done two ways. The first is by checking the box next to the library in the package tab shown in Figure 2. The second is using the library command in the console. library(ggplot2) packageVersion(&quot;ggplot2&quot;) ## [1] &#39;2.2.1.9000&#39; The above command will load the ggplot2 package into the current R session and is followed by a second command which will display the library version. Tracking library versions can be useful for reproducing and sharing code so it is a good habit to get into. Although it may seem tedious now, we will see how we can leverage RMarkdown documents to facilitate library loading and versioning. 2.4 R Markdown RMarkdown is a software package integrated into RStudio which facilitates documentation and reproducibility of your work. RMarkdown documents can be shared with colleageus or published on-line facilitating collaboration and open data sharing. While there are some nuances to R Markdown documents there are three key principles you should understand before diving in. Once you understand the basics, you can extend your knowledge using the official R Markdown documentation. Principle 1: Formatting R Markdown is based on the original Markdown tool which was designed to provide a simple syntax for writing documents for the web. This simple, code based format makes for an unobstructive writing environment. Formatting is done with mark-up codes instead of using functions in a word processor which makes it easy for other software such as web-browsers or knitr (disussed below) to dissect and recompile into html or PDF documents. There are a lot of codes available to customize the format of your text (see: [The R Markdown Reference Guide(https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf)), but you don’t need to memorize all of them to get started. Some basics will be sufficient for getting started. italics are displayed by surrounding the word with single asterisks (*word*). bold a word with double asterisks (**word**) Most importantly, any text you write outside of a chunk (described below) is just text. It doesnt do anything at all other than act as plain text. So the areas outside of chunks should be used for exposition and documentation of your analysis. Principle 2: The Chunk R Code Chunks are the real heartbeat of R Markdown documents. Contrary to all of the text outside of an R chunk, text within a R code chunk is treated as code to process analysis, calculate statistics, or generate plots. The basis of a chunk are three backticks and an r in squigly brackets (```{r}) to start the chunk and three backticks (```) to end it. For example: # This is an example R chunk Everything in between the R chunk identifiers will be run when the entire chunk is run. It is useful to break each step of your analysis into individual chunks. For example, if you want to load a set of libraries at the start of your R analysis you may do something like the following: # Load libraries library(&quot;ggplot2&quot;) packageVersion(&quot;ggplot2&quot;) ## [1] &#39;2.2.1.9000&#39; library(&quot;phyloseq&quot;) ## Loading required package: methods packageVersion(&quot;phyloseq&quot;) ## [1] &#39;1.19.1&#39; library(&quot;magrittr&quot;) packageVersion(&quot;magrittr&quot;) ## [1] &#39;1.5&#39; library(&quot;RColorBrewer&quot;) packageVersion(&quot;RColorBrewer&quot;) ## [1] &#39;1.1.2&#39; library(&quot;vegan&quot;) ## Loading required package: permute ## Loading required package: lattice ## This is vegan 2.4-3 packageVersion(&quot;vegan&quot;) ## [1] &#39;2.4.3&#39; library(&quot;gridExtra&quot;) packageVersion(&quot;gridExtra&quot;) ## [1] &#39;2.2.1&#39; library(&quot;knitr&quot;) packageVersion(&quot;knitr&quot;) ## [1] &#39;1.15.1&#39; library(&quot;dplyr&quot;) ## ## Attaching package: &#39;dplyr&#39; ## The following object is masked from &#39;package:gridExtra&#39;: ## ## combine ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union packageVersion(&quot;dplyr&quot;) ## [1] &#39;0.5.0&#39; library(&quot;DESeq2&quot;) ## Loading required package: S4Vectors ## Warning: package &#39;S4Vectors&#39; was built under R version 3.3.3 ## Loading required package: stats4 ## Loading required package: BiocGenerics ## Loading required package: parallel ## ## Attaching package: &#39;BiocGenerics&#39; ## The following objects are masked from &#39;package:parallel&#39;: ## ## clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, ## clusterExport, clusterMap, parApply, parCapply, parLapply, ## parLapplyLB, parRapply, parSapply, parSapplyLB ## The following objects are masked from &#39;package:dplyr&#39;: ## ## combine, intersect, setdiff, union ## The following object is masked from &#39;package:gridExtra&#39;: ## ## combine ## The following objects are masked from &#39;package:stats&#39;: ## ## IQR, mad, xtabs ## The following objects are masked from &#39;package:base&#39;: ## ## anyDuplicated, append, as.data.frame, cbind, colnames, ## do.call, duplicated, eval, evalq, Filter, Find, get, grep, ## grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, ## match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, ## Position, rank, rbind, Reduce, rownames, sapply, setdiff, ## sort, table, tapply, union, unique, unsplit, which, which.max, ## which.min ## ## Attaching package: &#39;S4Vectors&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## first, rename ## The following objects are masked from &#39;package:base&#39;: ## ## colMeans, colSums, expand.grid, rowMeans, rowSums ## Loading required package: IRanges ## Warning: package &#39;IRanges&#39; was built under R version 3.3.3 ## ## Attaching package: &#39;IRanges&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## collapse, desc, regroup, slice ## The following object is masked from &#39;package:phyloseq&#39;: ## ## distance ## Loading required package: GenomicRanges ## Warning: package &#39;GenomicRanges&#39; was built under R version 3.3.3 ## Loading required package: GenomeInfoDb ## Loading required package: SummarizedExperiment ## Loading required package: Biobase ## Welcome to Bioconductor ## ## Vignettes contain introductory material; view with ## &#39;browseVignettes()&#39;. To cite Bioconductor, see ## &#39;citation(&quot;Biobase&quot;)&#39;, and for packages &#39;citation(&quot;pkgname&quot;)&#39;. ## ## Attaching package: &#39;Biobase&#39; ## The following object is masked from &#39;package:phyloseq&#39;: ## ## sampleNames packageVersion(&quot;DeSeq2&quot;) ## [1] &#39;1.14.1&#39; library(&quot;plotly&quot;) ## ## Attaching package: &#39;plotly&#39; ## The following object is masked from &#39;package:IRanges&#39;: ## ## slice ## The following object is masked from &#39;package:S4Vectors&#39;: ## ## rename ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## The following object is masked from &#39;package:graphics&#39;: ## ## layout packageVersion(&quot;plotly&quot;) ## [1] &#39;4.5.6.9000&#39; All of the commands in this chunk can be run by running the entire chunk. There are options for running the current chunk, all chunks, current line of the chunk and more available at the top of the menu under the run tab. It will be worth your time to learn the key bindings for running chunks as you will be regularly updating and rerunning chunks as you work. You will notice that there are parts of the chunk that start with the # symbol. This is how you tell the R Markdown chunk not to run something. So while # Load libraries will be displayed when it is run, due to the # symbol R knows not to process this as a command. This is an additional way to document your code and should be used liberally throughout your R Markdown document creation. Principle 3: Publishing Once you know some basics about formatting text and creating R chunks you can combine these two skills to produce reports as either PDF, HTML or Word. Other document types are available as well through other packages, but these three formats are standard. Report generation is completed by kniting your R Markdown document. This is done using the knit button at the top of the R Markdown pane. The processing from R Markdown to another format is done by the knitr package. Knitr provides a number of options for customizing how your reports appear. Many of these options are placed in the R chunk header. For example, the following header will tell knitr to exclude the R chunk from the final document, but to go ahead and run it as part of your analysis. This is useful for sharing reports with collaborators who may not be interested in some of the intermediate analysis that goes along with an analysis. You can also specify figure height and width amongst other things. You should also name your R chunks to keep them straight. Naming a chunk is easy as it is just any text that appears after the r and before a comma. The name of the following R chunk is Example R chunk. ``` # This R chunk will print a summary of the cars example data set # It will also generate a scatterplot of the cars data. # To exclude this from the final report change include to FALSE summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 plot(cars) ``` There are a number of interesting ways to publish or share your work from R Studio including geneating web sites or interactive notebooks. This book will not detail them further, but more information can be found using the links below: RPubs: Free, simple R Markdown sharing service. R Notebooks: Interactive, portable R Markdown documents. Shiny. Publish interactive documents which accept user input. R Markdown Web sites: HTML versions of your R Markdown documents with additional features. bookdown: Used to generate this book R presentations. Make slide decks directly in R Studio "],
["data-and-workflow.html", "Chapter 3 Data and Workflow 3.1 Data 3.2 Workflow", " Chapter 3 Data and Workflow This chapter provides an introduction to the example data used throughout this book and provides a high-level overview of the analytical workflow used in its analysis. 3.1 Data 3.2 Workflow "],
["data-assessment-and-filtering.html", "Chapter 4 Data Assessment and Filtering", " Chapter 4 Data Assessment and Filtering "],
["alpha-diversity.html", "Chapter 5 Alpha Diversity", " Chapter 5 Alpha Diversity "],
["beta-diversity.html", "Chapter 6 Beta Diversity", " Chapter 6 Beta Diversity "],
["differential-abundance-testing.html", "Chapter 7 Differential Abundance Testing", " Chapter 7 Differential Abundance Testing "],
["machine-learning-approaches.html", "Chapter 8 Machine Learning Approaches", " Chapter 8 Machine Learning Approaches "],
["reproducible-workflows.html", "Chapter 9 Reproducible Workflows", " Chapter 9 Reproducible Workflows "],
["resources.html", "Chapter 10 Resources 10.1 Software Packages 10.2 Web sites 10.3 Regular Courses/Workshops 10.4 Publishing R Markdown documents 10.5 Books", " Chapter 10 Resources 10.1 Software Packages 10.1.1 Exapnsive 16S analysis packages QIIME QIIME 2 Mothur PhyloSeq 10.1.2 Useful R libraries vegan: Extensive library of ecological analysis tools. tidyverse: includes ggplot2, dplyr and many others. DeSeq2: Differential abundance testing. dada2. Resolve sequence variants from amplicon data. randomForest: Perform random forest analysis on a data frame. microbiome. Useful extensions for PhyloSeq. ampvis: An R package to visualize amplicon data. 10.2 Web sites Michelle Berry’s ((???)) wonderful tutorial on using PhyloSeq and R for Community Diversity Analysis: Microbial Community Diversity Analysis Tutorial with Phyloseq SeqAnswers General help on bioinformatics. Has a Metagenomics Forum BioStars 10.3 Regular Courses/Workshops Workshop on Genomics. Held annually in the Czech Republic. QIIME Workshops EDAMAME: Course and Extensive On-line Materials. Organzied in 2014 and 2015. STAMPS: Held annually at the Woods Hole Marine Biological Laboratory. 10.4 Publishing R Markdown documents RPubs: Free, simple R Markdown sharing service. R Notebooks: Interactive, portable R Markdown documents. Shiny. Publish interactive documents which accept user input. R Markdown Web sites: HTML versions of your R Markdown documents with additional features. bookdown: Used to generate this book R presentations. Make slide decks directly in R Studio 10.5 Books Numerical Ecology. P. Legendre and Loic Legendre. eBook ISBN: 9780444538697. Paperback ISBN: 9780444538680 "]
]
